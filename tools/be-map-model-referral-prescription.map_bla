map "https://www.ehealth.fgov.be/standards/fhir/referral/StructureMap/be-map-model-referral-prescription" = "be-map-model-referral-prescription"

uses "https://www.ehealth.fgov.be/standards/fhir/referral/StructureDefinition/be-model-referralprescription" as source
uses "https://www.ehealth.fgov.be/standards/fhir/referral/StructureDefinition/be-referralprescription" as target
uses "https://www.ehealth.fgov.be/standards/fhir/core/StructureDefinition/be-ext-recorder" alias BeExtRecorder as produced
uses "http://hl7.org/fhir/StructureDefinition/Reference" alias Reference as produced
uses "https://www.ehealth.fgov.be/standards/fhir/referral/StructureDefinition/be-co-prescriber-info" alias BeExtCoPrescriberInfo as produced
uses "https://www.ehealth.fgov.be/standards/fhir/referral/StructureDefinition/be-co-prescriber" alias BeCoPrescriber as produced

group Main(source model : BeModelReferralPrescription, target profile : BeReferralPrescription) {

    model.recorder as recorder then {
        recorder  -> create('BeExtRecorder') as data , create('Reference') as ref, ref.reference = recorder, BeExtRecorder(ref,data) as beextrecorder then {
                beextrecorder -> profile.extension as ext then extension('https://www.ehealth.fgov.be/standards/fhir/core/StructureDefinition/be-ext-recorder',beextrecorder,ext) "add BeExtRecorder";
        }"bla3";           
    } "bla";
}


group extension(source url, source value, target ext: Extension) {
    url -> ext.url "url";
    value -> ext.value "value"; 
}

/*
group Coprescriber(source model: BackboneElement, target profile: BeCoPrescriber) {
    model.'co-prescriber' as ref then {
        ref -> create('Reference') as cpref then {
            cpref -> cpref.reference = ref "set ref"; 
            cpref -> profile.extension as ext then extension('https://www.ehealth.fgov.be/standards/fhir/referral/StructureDefinition/be-co-prescriber',cpref,ext) "create ext";
        } "coprescriber";
    };
    model.status as status then {
        status -> cc(status) as ccstatus then {
            ccstatus -> profile.extension as ext then extension('coprescriptionStatus',ccstatus,ext) "status";
        } "bla";
    }"bla2";
    model.required as required then {
        required -> cc(required) as ccrequired then {
            ccrequired -> profile.extension as ext then extension('required',ccrequired,ext) "required";
        } "bla";
    }"bla2";
}

group Coprescriberinfo(source model: BeModelReferralPrescription, target profile: BeExtCoPrescriberInfo){
    
    model.'co-prescriberNumber' as number -> profile.extension as ext then extension('coprescriberNumber', number, ext);
    
    model.'co-prescriber' as coprescriber then {
        coprescriber -> create('BeCoPrescriber') as data , Coprescriber(coprescriber, data) as coprescriberstruct then {
                coprescriberstruct -> profile.extension as ext2 then extension('coprescriber',coprescriberstruct, ext) "extension";
        } "bla1";
    } "bla2";
    
};

*/

group BeExtRecorder(source model: Reference, target profile: BeExtRecorder){
    model as ref -> profile.value = ref "set ref to beextrecorder";
    
}



/*
group Main(source model : BeModelReferralPrescription, target profile : BeReferralPrescription) {

    model.recordedDate -> profile.authoredOn "recordedDate";
    model.recorder as recorder then {
        recorder  -> create('BeExtRecorder') as data , create('Reference') as ref, ref.reference = recorder, BeExtRecorder(ref,data) as beextrecorder then {
                beextrecorder -> profile.extension as ext then extension('https://www.ehealth.fgov.be/standards/fhir/core/StructureDefinition/be-ext-recorder',beextrecorder,ext) "add BeExtRecorder";
        }"bla3";           
    } "bla";
    model.prescriber as id -> profile.requester = create('Reference') as reference, reference = id;
    model.'co-prescriberNumber' -> profile.extension as ext then extension('https://www.ehealth.fgov.be/standards/fhir/referral/StructureDefinition/be-co-prescriber-info', coprescriberinfo(model, create('BeExtCoPrescriberInfo')) ,ext); 
}
*/

